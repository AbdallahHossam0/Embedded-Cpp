
./bin/a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001064  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000654  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020b  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c0f  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e4  00000000  00000000  000028f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002ad7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0b d0       	rcall	.+22     	; 0x8e <main>
  78:	a4 c0       	rjmp	.+328    	; 0x1c2 <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <_Z4waitv>:
int wait(void) { return 3; }
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	df 91       	pop	r29
  8a:	cf 91       	pop	r28
  8c:	08 95       	ret

0000008e <main>:
#include "dio.h"
#include "registers.h"

extern int wait(void);

int main(void) {
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
  96:	2a 97       	sbiw	r28, 0x0a	; 10
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	f8 94       	cli
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	cd bf       	out	0x3d, r28	; 61
    using D0 = DIO<std::uint8_t, std::uint8_t, mcal::reg::PORTD, UINT8_C(0x00)>;
    D0::setPinHigh();
  a2:	41 d0       	rcall	.+130    	; 0x126 <_ZN3DIOIhhLh50ELh0EE10setPinHighEv>
    D0::setDirectionOutput();
  a4:	49 d0       	rcall	.+146    	; 0x138 <_ZN3DIOIhhLh50ELh0EE18setDirectionOutputEv>
    int v{wait()};
  a6:	ea df       	rcall	.-44     	; 0x7c <_Z4waitv>
  a8:	9a 87       	std	Y+10, r25	; 0x0a
  aa:	89 87       	std	Y+9, r24	; 0x09
  ac:	89 85       	ldd	r24, Y+9	; 0x09
    for(;;) {
        for(uint32_t i{static_cast<uint32_t>(v)}; i < 0xFF'FF; ++i) {
  ae:	9a 85       	ldd	r25, Y+10	; 0x0a
  b0:	09 2e       	mov	r0, r25
  b2:	00 0c       	add	r0, r0
  b4:	aa 0b       	sbc	r26, r26
  b6:	bb 0b       	sbc	r27, r27
  b8:	89 83       	std	Y+1, r24	; 0x01
  ba:	9a 83       	std	Y+2, r25	; 0x02
  bc:	ab 83       	std	Y+3, r26	; 0x03
  be:	bc 83       	std	Y+4, r27	; 0x04
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	9a 81       	ldd	r25, Y+2	; 0x02
  c4:	ab 81       	ldd	r26, Y+3	; 0x03
  c6:	bc 81       	ldd	r27, Y+4	; 0x04
  c8:	8f 3f       	cpi	r24, 0xFF	; 255
  ca:	9f 4f       	sbci	r25, 0xFF	; 255
  cc:	a1 05       	cpc	r26, r1
  ce:	b1 05       	cpc	r27, r1
  d0:	68 f4       	brcc	.+26     	; 0xec <main+0x5e>
  d2:	00 00       	nop
            continue;
  d4:	89 81       	ldd	r24, Y+1	; 0x01
    using D0 = DIO<std::uint8_t, std::uint8_t, mcal::reg::PORTD, UINT8_C(0x00)>;
    D0::setPinHigh();
    D0::setDirectionOutput();
    int v{wait()};
    for(;;) {
        for(uint32_t i{static_cast<uint32_t>(v)}; i < 0xFF'FF; ++i) {
  d6:	9a 81       	ldd	r25, Y+2	; 0x02
  d8:	ab 81       	ldd	r26, Y+3	; 0x03
  da:	bc 81       	ldd	r27, Y+4	; 0x04
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	a1 1d       	adc	r26, r1
  e0:	b1 1d       	adc	r27, r1
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	9a 83       	std	Y+2, r25	; 0x02
  e6:	ab 83       	std	Y+3, r26	; 0x03
  e8:	bc 83       	std	Y+4, r27	; 0x04
  ea:	ea cf       	rjmp	.-44     	; 0xc0 <main+0x32>
            continue;
        }
        D0::setPinLow();
  ec:	2e d0       	rcall	.+92     	; 0x14a <_ZN3DIOIhhLh50ELh0EE9setPinLowEv>
  ee:	1d 82       	std	Y+5, r1	; 0x05
        for(uint32_t i{}; i < 0xFF'FF; ++i) {
  f0:	1e 82       	std	Y+6, r1	; 0x06
  f2:	1f 82       	std	Y+7, r1	; 0x07
  f4:	18 86       	std	Y+8, r1	; 0x08
  f6:	8d 81       	ldd	r24, Y+5	; 0x05
  f8:	9e 81       	ldd	r25, Y+6	; 0x06
  fa:	af 81       	ldd	r26, Y+7	; 0x07
  fc:	b8 85       	ldd	r27, Y+8	; 0x08
  fe:	8f 3f       	cpi	r24, 0xFF	; 255
 100:	9f 4f       	sbci	r25, 0xFF	; 255
 102:	a1 05       	cpc	r26, r1
 104:	b1 05       	cpc	r27, r1
 106:	68 f4       	brcc	.+26     	; 0x122 <main+0x94>
 108:	00 00       	nop
            continue;
 10a:	8d 81       	ldd	r24, Y+5	; 0x05
    for(;;) {
        for(uint32_t i{static_cast<uint32_t>(v)}; i < 0xFF'FF; ++i) {
            continue;
        }
        D0::setPinLow();
        for(uint32_t i{}; i < 0xFF'FF; ++i) {
 10c:	9e 81       	ldd	r25, Y+6	; 0x06
 10e:	af 81       	ldd	r26, Y+7	; 0x07
 110:	b8 85       	ldd	r27, Y+8	; 0x08
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	a1 1d       	adc	r26, r1
 116:	b1 1d       	adc	r27, r1
 118:	8d 83       	std	Y+5, r24	; 0x05
 11a:	9e 83       	std	Y+6, r25	; 0x06
 11c:	af 83       	std	Y+7, r26	; 0x07
 11e:	b8 87       	std	Y+8, r27	; 0x08
 120:	ea cf       	rjmp	.-44     	; 0xf6 <main+0x68>
            continue;
        }
        D0::setPinHigh();
 122:	01 d0       	rcall	.+2      	; 0x126 <_ZN3DIOIhhLh50ELh0EE10setPinHighEv>
 124:	c3 cf       	rjmp	.-122    	; 0xac <main+0x1e>

00000126 <_ZN3DIOIhhLh50ELh0EE10setPinHighEv>:
    }
 126:	cf 93       	push	r28
                                   pin>::bitClear();
    }
    static void enablePullUpRes(void) {
        mcal::reg::RegStaticAccess<AddrType, RegType, addr - 2, pin>::bitSet();
    }
    static void setPinHigh(void) {
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
        mcal::reg::RegStaticAccess<AddrType, RegType, addr, pin>::bitSet();
 12e:	16 d0       	rcall	.+44     	; 0x15c <_ZN4mcal3reg15RegStaticAccessIhhLh50ELh0EE6bitSetEv>
    }
 130:	00 00       	nop
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <_ZN3DIOIhhLh50ELh0EE18setDirectionOutputEv>:

template<typename AddrType, typename RegType, const AddrType addr,
         const RegType pin>
class DIO {
   public:
    static void setDirectionOutput(void) {
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
        mcal::reg::RegStaticAccess<AddrType, RegType, addr - 1, pin>::bitSet();
 140:	1e d0       	rcall	.+60     	; 0x17e <_ZN4mcal3reg15RegStaticAccessIhhLh49ELh0EE6bitSetEv>
    }
 142:	00 00       	nop
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <_ZN3DIOIhhLh50ELh0EE9setPinLowEv>:
        mcal::reg::RegStaticAccess<AddrType, RegType, addr - 2, pin>::bitSet();
    }
    static void setPinHigh(void) {
        mcal::reg::RegStaticAccess<AddrType, RegType, addr, pin>::bitSet();
    }
    static void setPinLow(void) {
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
        mcal::reg::RegStaticAccess<AddrType, RegType, addr, pin>::bitClear();
 152:	26 d0       	rcall	.+76     	; 0x1a0 <_ZN4mcal3reg15RegStaticAccessIhhLh50ELh0EE8bitClearEv>
    }
 154:	00 00       	nop
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <_ZN4mcal3reg15RegStaticAccessIhhLh50ELh0EE6bitSetEv>:
            static void bitNot(void) {
                *reinterpret_cast<volatile RegType*>(addr) ^=
                    static_cast<RegType>(1U << val);
            }

            static void bitSet(void) {
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
                *reinterpret_cast<volatile RegType*>(addr) |=
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	20 81       	ld	r18, Z
 16c:	82 e3       	ldi	r24, 0x32	; 50
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	21 60       	ori	r18, 0x01	; 1
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
                    static_cast<RegType>(1U << val);
            }
 176:	00 00       	nop
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <_ZN4mcal3reg15RegStaticAccessIhhLh49ELh0EE6bitSetEv>:
            static void bitNot(void) {
                *reinterpret_cast<volatile RegType*>(addr) ^=
                    static_cast<RegType>(1U << val);
            }

            static void bitSet(void) {
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
                *reinterpret_cast<volatile RegType*>(addr) |=
 186:	81 e3       	ldi	r24, 0x31	; 49
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	20 81       	ld	r18, Z
 18e:	81 e3       	ldi	r24, 0x31	; 49
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	21 60       	ori	r18, 0x01	; 1
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
                    static_cast<RegType>(1U << val);
            }
 198:	00 00       	nop
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <_ZN4mcal3reg15RegStaticAccessIhhLh50ELh0EE8bitClearEv>:

            static void bitClear(void) {
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
                *reinterpret_cast<volatile RegType*>(addr) &=
 1a8:	82 e3       	ldi	r24, 0x32	; 50
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 81       	ld	r18, Z
 1b0:	82 e3       	ldi	r24, 0x32	; 50
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	2e 7f       	andi	r18, 0xFE	; 254
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18
                    ~static_cast<RegType>(1U << val);
            }
 1ba:	00 00       	nop
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
